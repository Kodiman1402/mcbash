#!/bin/sh

check_parameters() {
	if [ "$avoid_parameters" = true ]; then
		[[ -n ${request_delay} ]] || request_delay=$default_request_delay
		[[ -n ${timebreak_duration} ]] || timebreak_duration=$default_timebreak_duration
		[[ -n ${timeout} ]] || timeout=$default_timeout
		if [[ -n ${range} ]]; then
		#if [[ -n ${seq} ]]; then
			[[ -n ${range_from} ]] || range_from=$default_first_mac
			[[ -n ${range_to} ]] || range_to=$default_last_mac
		fi
	fi

	[[ -z ${request_delay+x} && \
		-z ${timebreak+x} && \
		-z ${timebreak_duration+x} && \
		-z ${stopping+x} && \
		-z ${timeout+x} && \
		-z ${keep_expired+x} ]] && \
		read -p "${_BOLD}=>${_RESET} Adjust parameters? ${_BOLD}[y/N]${_RESET} " PARAMETERS

	if [[ $(echo $PARAMETERS | grep -io "y") ]]; then
		[[ -z ${request_delay+x} ]] && \
			read -p " ${_BOLD}*${_RESET} Wait ${_GREEN}[X] ${_RESET}seconds between two requests ${_BOLD}[default:$default_request_delay]${_RESET} ${_BOLD}${_GREEN}" request_delay

		[[ $request_delay == "" ]] && \
			request_delay=$default_request_delay

		[[ -z ${timebreak+x} ]] && \
			read -p "${_RESET} ${_BOLD}*${_RESET} Make a break every ${_GREEN}[X]${_RESET} requests ${_BOLD}[$default_timebreak]${_RESET} ${_BOLD}${_GREEN}" timebreak

		[[ $timebreak == "" ]] && \
			timebreak=$default_timebreak && \
			[[ $timebreak == "0" ]] && unset timebreak

		[[ -z ${timebreak_duration+x} && $timebreak != "" ]] && \
			read -p "${_RESET} ${_BOLD}*${_RESET} Break duration (seconds) ${_BOLD}[$default_timebreak_duration]${_RESET} ${_BOLD}${_GREEN}" timebreak_duration

		[[ $timebreak_duration == "" ]] && \
			timebreak_duration=$default_timebreak_duration

		[[ -z ${stopping+x} ]] && \
			read -p "${_RESET} ${_BOLD}*${_RESET} Stop McBash after ${_GREEN}[X]${_RESET} tested MAC addresses ${_BOLD}[$default_stopping]${_RESET} ${_BOLD}${_GREEN}" stopping

		[[ $stopping == "" ]] && \
			stopping=$default_stopping && \
			[[ $stopping == "0" ]] && unset stopping

		[[ -z ${timeout+x} ]] && \
			read -p "${_RESET} ${_BOLD}*${_RESET} Consider request a timeout after ${_GREEN}[X]${_RESET} seconds ${_BOLD}[$default_timeout]${_RESET} ${_BOLD}${_GREEN}" timeout

		[[ $timeout == "" ]] && timeout=$default_timeout

		#[[ -z ${range+x} ]] && \
		[[ -z ${seq+x} ]] && \
			read -p "${_RESET} ${_BOLD}*${_RESET} Scan ${_GREEN}randomly [r]${_RESET} or ${_GREEN}sequentially [s]${_RESET} ${_BOLD}[r]${_RESET} ${_BOLD}${_GREEN}" mode
		#[[ $(echo $mode | grep -io "s") ]] && range=true
		[[ $(echo $mode | grep -io "s") ]] && seq=true

		#[[ -z ${range+x} ]] && \
		[[ -z ${seq+x} ]] && \
			echo -e "${_RESET} ${_BOLD}*${_RESET} You have selected ${_GREEN}random mode${_RESET}"

		if [[ -z ${range+x} && -z ${prefix} ]]; then
			read -p "${_RESET} ${_BOLD}->${_RESET} Indicate MAC to scan prefix ${_BOLD}[$default_mac_prefix]${_RESET} ${_BOLD}${_GREEN}" prefix
			if [[ ${prefix} == "" ]]; then
				unset prefix
			fi
		fi

		#[[ -n ${range} ]] && \
		[[ -n ${seq} ]] && \
			echo -e "${_RESET} ${_BOLD}*${_RESET} You have selected ${_GREEN}sequential mode${_RESET}" && \
			range=true

		[[ -n ${range} && -z ${range_from+x} ]] && \
			# If already checked on that dns AND not '--no-checkpoint' : default_first_mac = last checked!
			# + show a message
			if [[ -f "${destination}/checkpoint_${name}" && -z ${no_checkpoint+x} ]]; then
				checkpoint_mac=$(cat "${destination}/checkpoint_${name}")
				read -p "${_RESET} ${_BOLD}->${_RESET} Checkpoint! Continue were scan previously stopped ? (${_GREEN}${checkpoint_mac}${_RESET}) ${_BOLD}[Y/n/reset]${_RESET} ${_BOLD}${_GREEN}" grab_checkpoint
				if [[ $(echo $grab_checkpoint | grep -io "n") ]]; then
					no_checkpoint=true
					read -p "${_RESET} ${_BOLD}->${_RESET} Indicate first MAC to scan ${_BOLD}[$default_first_mac]${_RESET} ${_BOLD}${_GREEN}" first_mac
				elif [[ $(echo $grab_checkpoint | grep -io "reset") ]]; then
					# reset checkpoint
					echo -e "${_RESET} ${_BOLD}*${_RESET} Checkpoint will be ${_GREEN}reset${_RESET}."
					read -p "${_RESET} ${_BOLD}->${_RESET} Indicate first MAC to scan ${_BOLD}[$default_first_mac]${_RESET} ${_BOLD}${_GREEN}" first_mac
				else
					first_mac=${checkpoint_mac}
				fi
			else
				read -p "${_RESET} ${_BOLD}->${_RESET} Indicate first MAC to scan ${_BOLD}[$default_first_mac]${_RESET} ${_BOLD}${_GREEN}" first_mac
			fi

		#[[ -z $first_mac == "" ]] && unset first_mac

		[[ -z ${first_mac} ]] && first_mac=$default_first_mac

		[[ -n ${first_mac} ]] && range_from=$first_mac

		[[ -n ${range} && -z ${range_to+x} ]] && \
			read -p "${_RESET} ${_BOLD}->${_RESET} Indicate last MAC to scan ${_BOLD}[$default_last_mac]${_RESET} ${_BOLD}${_GREEN}" last_mac

		#[[ $last_mac == "" ]] && last_mac="$default_last_mac"

		[[ -z ${last_mac} ]] && last_mac=$default_last_mac

		[[ -n ${last_mac} ]] && range_to=$last_mac

		[[ -n ${keep_expired} ]] || \
			read -p "${_RESET} ${_BOLD}*${_RESET} Store expired MAC addresses (tagged as such)? ${_BOLD}[y/N]${_RESET} " keep_expired

		( [[ $keep_expired == "" || $(echo $keep_expired | grep -io "n") ]] ) && \
			unset keep_expired

		echo " ${_RESET}"

	elif [[ -n ${range} || -n ${range_from} || -n ${range_to} ]]; then
		if [[ -f "${destination}/checkpoint_${name}" && -z ${no_checkpoint+x} && -z ${range_from+x} ]]; then
			checkpoint_mac=$(cat "${destination}/checkpoint_${name}")
			#echo "${_RESET} ${_BOLD}->${_RESET} ${_GREEN}Checkpoint detected!${_RESET} Starting from last MAC scanned : ${_GREEN}${checkpoint_mac}${_RESET}"
			echo "${_RESET} ${_GREEN}Checkpoint detected!${_RESET} Starting from ${_GREEN}${checkpoint_mac}${_RESET} (last MAC scanned)"
			range_from=${checkpoint_mac}
		fi
		[[ -n ${range_from} ]] || \
			read -p "${_RESET} ${_BOLD}->${_RESET} Indicate first MAC to scan ${_BOLD}[$default_first_mac]${_RESET} ${_BOLD}${_GREEN}" first_mac
		[[ -n ${range_from} ]] && first_mac=$range_from

		#[[ $first_mac == "" ]] && unset first_mac
		[[ -z ${first_mac} ]] && first_mac=$default_first_mac && range_from="$default_first_mac"
		[[ -n ${first_mac} ]] && range_from=$first_mac

		[[ -n ${range_to} ]] || read -p "${_RESET} ${_BOLD}->${_RESET} Indicate last MAC to scan ${_BOLD}[$default_last_mac]${_RESET} ${_BOLD}${_GREEN}" last_mac
		[[ -n ${range_to} ]] && last_mac=$range_to

		[[ -z $last_mac ]] && last_mac="$default_last_mac" && range_to="$default_last_mac"
		[[ -n ${last_mac} ]] && range_to=$last_mac

		[[ -n ${request_delay} ]] || request_delay=$default_request_delay

		[[ -n ${timebreak} ]] || timebreak=$default_timebreak

		[[ -n ${timebreak_duration} ]] || timebreak_duration=$default_timebreak_duration

		[[ -n ${timeout} ]] || timeout=$default_timeout

		#[[ -n ${range_from} ]] || range_from=$default_first_mac
		#[[ -n ${range_to} ]] || range_to=$default_last_mac
	else
		[[ -n ${request_delay} ]] || request_delay=$default_request_delay

		[[ -n ${timebreak} ]] || timebreak=$default_timebreak

		[[ -n ${timebreak_duration} ]] || timebreak_duration=$default_timebreak_duration

		[[ -n ${timeout} ]] || timeout=$default_timeout

		if [[ -n ${range} || -n ${range_from} || -n ${range_to} ]]; then
			range=true
			if [[ -f "${destination}/checkpoint_${name}" && -z ${no_checkpoint+x} ]]; then
				checkpoint_mac=$(cat "${destination}/checkpoint_${name}")
				default_first_mac=${checkpoint_mac}
			fi
			[[ -n ${range_from} ]] || range_from=$default_first_mac && first_mac=$default_first_mac
			[[ -n ${range_to} ]] || range_to=$default_last_mac && last_mac=$default_last_mac
		fi
		return
	fi
}
