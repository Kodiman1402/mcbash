#!/bin/sh

read_args() {
	args=("$@")
	ELEMENTS=${#args[@]}
	for (( i=0;i<$ELEMENTS;i++)); do
		[[ $(echo ${args[${i}]}) == "--show-only-mac" ]] && \
			only_outputs_mac=true
		[[ $(echo ${args[${i}]}) == "-np" || \
			$(echo ${args[${i}]}) == "--default" ]] && \
			avoid_parameters=true
		[[ $(echo ${args[${i}]}) == "-u" || \
			$(echo ${args[${i}]}) == "--url" ]] && \
			argument_dns=$(( i + 1 )) && \
			dns=${args[${argument_dns}]} && \
			inspect "--url" "${dns}"
		#[[ $(echo ${args[${i}]} | grep -o "\.[a-z][a-z]" ) || \
		#	$(echo ${args[${i}]} | grep -o "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" ) ]] && \
		#	dns=${args[${i}]}
		[[ $(echo ${args[${i}]}) == "-w" || \
			$(echo ${args[${i}]}) == "--wait" ]] && \
			argument_request_delay=$(( i + 1 )) && \
			request_delay=${args[${argument_request_delay}]} && \
			inspect "--wait" "${request_delay}"
		[[ $(echo ${args[${i}]}) == "-t" || \
			$(echo ${args[${i}]}) == "--timeout" ]] && \
			argument_timeout=$(( i + 1 )) && \
			timeout=${args[${argument_timeout}]} && \
			inspect "--timeout" "${timeout}"
		[[ $(echo ${args[${i}]}) == "-b" || \
			$(echo ${args[${i}]}) == "--break" ]] && \
			argument_timebreak=$(( i + 1 )) && \
			timebreak=${args[${argument_timebreak}]} && \
			inspect "--break" "${timebreak}"
		[[ $(echo ${args[${i}]}) == "-d" || \
			$(echo ${args[${i}]}) == "--pause-for" ]] && \
			argument_timebreak_duration=$(( i + 1 )) && \
			timebreak_duration=${args[${argument_timebreak_duration}]} && \
			inspect "--pause-for" "${timebreak_duration}"
		[[ $(echo ${args[${i}]}) == "-s" || \
			$(echo ${args[${i}]}) == "--stop" ]] && \
			argument_stop=$(( i + 1 )) && \
			stopping=${args[${argument_stop}]} && \
			inspect "--stop" "${stopping}"
		[[ $(echo ${args[${i}]}) == "-k" || \
			$(echo ${args[${i}]}) == "--keep" ]] && \
			argument_keep_expired=$(( i + 1 )) && \
			keep_expired=${args[${argument_keep_expired}]}
		[[ $(echo ${args[${i}]}) == "--range" ]] && \
			range=true
		[[ $(echo ${args[${i}]}) == "--seq" ]] && \
			seq=true && \
			range=true
		[[ $(echo ${args[${i}]}) == "-F" || \
			$(echo ${args[${i}]}) == "--from" ]] && \
			range=true && \
			argument_range_from=$(( i + 1 )) && \
			range_from=${args[${argument_range_from}]} && \
			inspect "--from" "${range_from}"
		[[ $(echo ${args[${i}]}) == "-L" ||
			$(echo ${args[${i}]}) == "--to" ]] && \
			range=true && \
			argument_range_to=$(( i + 1 )) && \
			range_to=${args[${argument_range_to}]} && \
			inspect "--to" "${range_to}"
		[[ $(echo ${args[${i}]}) == "-P" ||
			$(echo ${args[${i}]}) == "--proxy" ]] && \
			argument_proxy_url=$(( i + 1 )) && \
			proxy_url=${args[${argument_proxy_url}]} && \
			proxy_url_option=$(echo "-x $proxy_url")
		[[ $(echo ${args[${i}]}) == "-pu" ||
			$(echo ${args[${i}]}) == "--proxy-user" ]] && \
			argument_proxy_user=$(( i + 1 )) && \
			proxy_user=${args[${argument_proxy_user}]} && \
			proxy_user_option=$(echo "--proxy-anyauth --proxy-user $proxy_user")
		[[ $(echo ${args[${i}]}) == "--proxy-file" ]] && \
			proxy_from_file=true && \
			argument_proxy_file=$(( i + 1 )) && \
			proxy_file=${args[${argument_proxy_file}]} && \
			update_proxy
		[[ $(echo ${args[${i}]}) == "--no-checkpoint" ]] && \
			no_checkpoint=true
		[[ $(echo ${args[${i}]}) == "--prefix" ]] && \
			set_prefix=true && \
			argument_set_prefix=$(( i + 1 )) && \
			prefix=${args[${argument_set_prefix}]} #&& \
			#inspect "--prefix" "${prefix}"
		[[ $(echo ${args[${i}]}) == "--mac-file" ]] && \
			read_from_file=true && \
			argument_read_from_file=$(( i + 1 )) && \
			file_to_read_mac_from=${args[${argument_read_from_file}]} && \
			inspect "--mac-file" "${file_to_read_mac_from}"
		#[[ $(echo ${args[${i}]}) == "--rm-checkpoint" ]] && \
		#	echo "Remove checkpoint file for ${dns} ?" && exit 0
		[[ $(echo ${args[${i}]}) == "-h" || $(echo ${args[${i}]}) == "--help" ]] && \
			echo -e "${_BOLD}Help menu :${_RESET} \
			\n -u ${_BLUE}URL:port${_RESET} : Server ${_BLUE}URL/IP${_RESET} and ${_BLUE}port (optional)${_RESET} \
			\n -w ${_BLUE}X${_RESET} : Wait ${_BLUE}X${_RESET} seconds between each requests \
			\n -b ${_BLUE}X${_RESET} : Make a break every ${_BLUE}X${_RESET} requests \
			\n -d ${_BLUE}X${_RESET} : Break or timeout duration (${_BLUE}X${_RESET} seconds) \
			\n -t ${_BLUE}X${_RESET} : Consider request a timeout after a delay of ${_BLUE}X${_RESET} seconds \
			\n -s ${_BLUE}X${_RESET} : Stop McBash after ${_BLUE}X${_RESET} tested MAC addresses \
			\n --seq : Scan MAC addresses sequentially \
			\n --mac-file ${_BLUE}FILE${_RESET} : Scan MAC addresses from a file \
			\n -np : Use default parameters \
			\n man mcbash : Look up the manual for more tweaks (proxy support, shell scripts call, etc.)\
			\n \
			\n ${_BOLD}Example ${_RESET}: mcbash -u my-dns.com:8080 -w 1.5 -b 10 -d 3 -s 150 -t 2 -k \
			\n Set your default parameters inside this file : \"$HOME/.config/mcbash/mcbash.conf\"\
			\n MACs are stored here : \"${destination}\"\
			" && exit 0
	done
}

inspect() {
	case "${1}" in
		"--url"|"-u") inspect_dns "${2}";;
		"--wait"|"-w") inspect_float "${1}" "${2}";;
		"--timeout"|"-t") inspect_float "${1}" "${2}";;
		"--break"|"-b") inspect_int "${1}" "${2}";;
		"--pause-for"|"-d") inspect_float "${1}" "${2}";;
		"--stop"|"-s") inspect_int "${1}" "${2}";;
		"--from"|"-F"|"--to"|"-L") inspect_mac "${2}" "args";; # is it a well formed mac
		#"--prefix") inspect_mac_prefix "${2}";;
		"--mac-file") inspect_mac_file "${2}";;
		*) echo "Something went wrong inspecting arguments.";;
	esac
}

inspect_dns() {
	# Check if DNS is well formed URL or IP
	if ! [[ $(echo "${1}" | grep -Eo '((https?|ftp)://)?([a-Z0-9-]+\.)?[a-Z0-9-]+\.[a-Z0-9-]+((:)[0-9]{1,5})?') == "${1}" ||
		$(echo "${1}" | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}') == "${1}" ]]; then
		echo -e "${_RED}ERROR: invalid DNS format.${_RESET}"
		exit 1
	elif [[ $(echo "${1}" | sed 's/\ //g') == "" ]]; then
		echo -e "${_RED}ERROR: empty DNS.${_RESET}"
		exit 1
	fi
}

inspect_float() {
	if ! [[ $(echo "$2" | grep -Eo '([0-9]+)?(\.)?[0-9]+') == "${2}" ]]; then
		echo -e "${_RED}ERROR: ${_YELLOW}${1}${_RESET}${_RED} takes float or integer for parameter (e.g. ${_YELLOW}${1} 1.5${_RED}).${_RESET}"
		exit 1
	elif [[ $(echo "${2}" | sed 's/\ //g') == "" ]]; then
		echo -e "${_RED}ERROR: empty value for ${_YELLOW}${1}${_RED}.${_RESET}"
		exit 1
	fi
}

inspect_int() {
	if ! [[ $(echo "$2" | grep -Eo '[0-9]+') == "${2}" ]]; then
		echo -e "${_RED}ERROR: ${_YELLOW}${1}${_RESET}${_RED} takes integer for parameter (e.g. ${_YELLOW}${1} 10${_RED}).${_RESET}"
		exit 1
	elif [[ $(echo "${2}" | sed 's/\ //g') == "" ]]; then
		echo -e "${_RED}ERROR: empty value for ${_YELLOW}${1}${_RED}.${_RESET}"
		exit 1
	fi
}

inspect_mac () {
	mode=$2
	# If while checking USER argument : exit 1
	# Else, if reading a MAC file : return 1 for "bad MAC"
	if ! [[ $(echo "$1" | grep -Eo "([0-9a-fA-F]{2}[-:]){$(( (max_mac_length / 2) - 1 ))}[0-9a-fA-F]{2}") == "${1}" ]]; then
		if [[ ${mode} == "args" ]]; then
			echo -e "${_RED}ERROR: invalid MAC format.${_RESET}"
			echo -e "${_RED}Please use either ${_DIM}FORMAT_1${_RESET}${_RED} or ${_DIM}FORMAT_2${_RESET}${_RED} format.${_RESET}" | \
				sed -r 's/FORMAT_1/XX:XX:XX:XX:XX:XX/ ; s/FORMAT_2/XX-XX-XX-XX-XX-XX/'
			exit 1
		else
			return 1
		fi
	fi
}

inspect_mac_file() {
	if ! [[ -f $(realpath "${1}") ]]; then
		echo -e "${_RED}ERROR: file ${_YELLOW}${1}${_RED} does not exist.${_RESET}"
		exit 1
	fi
}










